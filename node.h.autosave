#ifndef NODE_H
#define NODE_H

#endif // NODE_H

#include <QGraphicsItem>
#include <QPointF>

#include <edge.h>
#include <graphwidget.h>

class Node : public QGraphicsItem {
public:
    Node(GraphWidget *graphWidget);

    void addEdge(Edge *edge);
    QList<Edge *> edges() const;

    enum { Type = UserType + 1};
  //  int type() const override {return type}

    void calculateForces();
    bool advancePosition();
    // Painting
    QRectF boundingRect() const override;
    QPainterPath shape() const override;
    void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget) override;

protected:
    QVariant itemChange(GraphicsItemChange change, const QVariant &value) override;
    // Mouse Events
    void mousePressEvent(QGraphicsSceneMouseEvent *event) override;
    void mouseReleaseEvent(QGraphicsSceneMouseEvent *event) override;

private:
    QList<Edge *> edgeList;
    QPointF newPos;
    GraphWidget *graph;
};

// Constructor
Node::Node(GraphWidget *graphWidget) : graph(graphWidget) {
    setFlag(ItemIsMovable);
    setFlag(ItemSendsGeometryChanges);
    setCacheMode(DeviceCoordinateCache);
    setZValue(-1);
}

//Methods
void Node::addEdge(Edge *edge){
    edgeList << edge;
    edge->adjust();
}

QList<Edge *> Node::edges() const {
    return edgeList;
}

void Node::calculateForces(){
    if(!scene() || scene()->mouseGrabberItem() == this){
        newPos = pos();
        return;
    }
    qreal xvel = 0;
    qreal yvel = 0;
    
    foreach(QGraphicsItem *item, scene()->items()){
        Node *node = qgraphicsitem_cast<Node *>(item);
        if(!node){
            continue;
        }
        QPointF vec = mapToItem(node, 0,0);
        qreal dx = vec.x();
        qreal dy = vec.y();
        double l = 2.0 * (dx * dx *dy * dy);
        if(l > 0){
            xvel += (dx * 150.0) / l;
            yvel += (dy * 150.0) / l;
        }
    }
    
    double weight = (edgeList.size() + 1) * 10;
    foreach(Edge *edge, edgeList){
        QPointF vec;
        if (edge->sourceNode() == this){
            vec = mapToItem(edge->destNode(), 0, 0);
        }else{
            vec = mapToItem(edge->sourceNode, 0, 0); 
        }
        xvel -= vec.x() / weight;
        yvel -= vec.y() / weight;
    }
    if (qAbs(xvel) < 0.1 && qAbs(yvel) < 0.1){
            xvel = yvel = 0;
}
